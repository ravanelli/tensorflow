#########################################################
# Author: Renata Ravanelli <rmatos@br.ibm.com>          #
# Version: 1.0                                          #
# Description: Automate Tensorflow 1.8 build for Power  #
#########################################################

import sys, subprocess
from subprocess import check_call, check_output, CalledProcessError


packages = [
    'yum install -y wget',
    'wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm',
    'rpm -ihv epel-release-latest-7.noarch.rpm',
    'yum install -y zip unzip java-1.8.0-openjdk-devel gcc gcc-c++ patch python-pip \
    python-wheel python-devel numpy git python-pip python-pandas python-enum34',
    ]
cudnn = [
    'tar -xzvf cudnn-9.0-linux-ppc64le-v7.1.tgz',
    'cp cuda/targets/ppc64le-linux/include/cudnn.h /usr/local/cuda/include',
    'cp cuda/targets/ppc64le-linux/lib/libcudnn.so /usr/local/cuda/lib64/',
    'cp cuda/targets/ppc64le-linux/lib/libcudnn.so.7 /usr/local/cuda/lib64/',
    'cp cuda/targets/ppc64le-linux/lib/libcudnn.so.7.1.4 /usr/local/cuda/lib64/',
    'cp cuda/targets/ppc64le-linux/lib/libcudnn_static.a /usr/local/cuda/lib64/',
    'chmod a+r /usr/local/cuda/include/', 
    'chmod a+r /usr/local/cuda/lib64/',
    'ldconfig'
    ]
cuda = [
     'wget http://developer.download.nvidia.com/compute/cuda/repos/rhel7/ppc64le/cuda-repo-rhel7-9.0.176-1.ppc64le.rpm',
     'rpm -i cuda-repo-rhel7-9.0.176-1.ppc64le.rpm',
     'yum clean all',
     'yum install cuda -y'
    ]
cmds =[
    'mkdir bazel', 
    'wget https://github.com/bazelbuild/bazel/releases/download/0.12.0/bazel-0.12.0-dist.zip',
    'mv bazel-0.12.0-dist.zip bazel/','unzip bazel/bazel-0.12.0-dist.zip -d bazel/',
    'bazel/compile.sh', 'cp bazel/output/bazel /usr/local/bin/',
    'git clone -b r1.8 https://github.com/tensorflow/tensorflow', 
    'wget https://github.com/tensorflow/tensorflow/commit/8f8a3c5151a674b3496691af49c3aa063841f292.patch',
    'patch -p1 tensorflow/third_party/png.BUILD  8f8a3c5151a674b3496691af49c3aa063841f292.patch', 
    ]
pip = ['pip install mock', 'pip install cython']

def run_cmd(command):

    '''
    Run the given command using check_call and verify its return code.
    @param str command command to be executed
    '''

    try:
        check_call(command.split())
    except CalledProcessError as e:
        print 'An exception has occurred: {0}'.format(e)
        sys.exit(1)

def execute_cmd(list, step):

    '''
    Execute the given commands using run_cmd function
    @param list list commands to be executed
    @param step str name of the comand to be executed
    '''

    print 'Step: %s' % (step)
    
    for item in list:
        run_cmd(item)

def set_environment():

    '''
    Create bazelrc file with the necessary settings
    '''

    f= open('tensorflow/.bazelrc',"w+")
    f.write("build --action_env PYTHON_BIN_PATH='/usr/bin/python'\n\
build --action_env PYTHON_LIB_PATH='/usr/lib/python2.7/site-packages'\n\
build --force_python=py2\n\
build --host_force_python=py2\n\
build --python_path='/usr/bin/python'\n\
build --define with_jemalloc=true\n\
build --define with_hdfs_support=true\n\
build:gcp --define with_gcp_support=false\n\
build:s3 --define with_s3_support=false\n\
build:kafka --define with_kafka_support=false\n\
build:xla --define with_xla_support=false\n\
build:gdr --define with_gdr_support=false\n\
build:verbs --define with_verbs_support=false\n\
build --action_env TF_NEED_OPENCL_SYCL='0'\n\
build --action_env TF_NEED_CUDA='1'\n\
build --action_env TF_CUDA_VERSION='9.2'\n\
build --action_env CUDA_TOOLKIT_PATH='/usr/local/cuda-9.2'\n\
build --action_env CUDNN_INSTALL_PATH='/usr/local/cuda-9.2'\n\
build --action_env TF_CUDNN_VERSION='7'\n\
build --action_env TF_NCCL_VERSION='1'\n\
build --action_env TF_CUDA_COMPUTE_CAPABILITIES='3.5,3.7,5.2,6.0,7.0'\n\
build --action_env LD_LIBRARY_PATH='/usr/local/nvidia/lib:/usr/local/nvidia/lib64'\n\
build --action_env TF_CUDA_CLANG='0'\n\
build --action_env GCC_HOST_COMPILER_PATH='/usr/bin/gcc'\n\
build --config=cuda\n\
test --config=cuda\n\
build --define grpc_no_ares=true\n\
build:opt --copt=-mcpu=power8\n\
build:opt --copt=-mtune=power8\n\
build:opt --define with_default_optimizations=true\n\
build --copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\n\
build --host_copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK")
    f.close() 

def run_build(list, dir):
    '''
    Execute the given commands in other directory
    @param list list commands to be executed
    @param dir str directory path
    '''
    try:
        build = subprocess.Popen(list, cwd=dir)
        build.wait()
    except CalledProcessError as e:
        print 'An exception has occurred: {0}'.format(e)
        sys.exit(1)

def main():

    execute_cmd(packages, 'Intalling necessary Packages')
    execute_cmd(cuda, 'Installing Cuda')
    execute_cmd(cudnn, 'Installing cudnn')
    execute_cmd(cmds, 'Running necessary commands')
    set_environment()

    run_build(['/usr/local/bin/bazel', 'build', '-c', 'opt', '//tensorflow/tools/pip_package:build_pip_package'], '/root/tensorflow/')

    run_build(['bazel-bin/tensorflow/tools/pip_package/build_pip_package', '../tensorflow_pkg'], '/root/tensorflow/')

    execute_cmd(pip, 'Installing pip packages')
    run_build(['pip', 'install', 'tensorflow-1.8.0-cp27-none-linux_ppc64le.whl'], '/root/tensorflow_pkg/')


if __name__ == "__main__":
    main()
